#!/usr/bin/python

import os
import sys
import argparse
import logging
import jinja2

try:
    import json
    have_json = True
except ImportError:
    have_json = False

try:
    import yaml
    have_yaml = True
except ImportError:
    have_yaml = False

LOG = logging.getLogger(__name__)

def kvdict(arg):
    return arg.split('=', 1)

def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument('--verbose', '-v',
                   action='store_const',
                   const='INFO',
                   dest='loglevel')
    p.add_argument('--debug', '-d',
                   action='store_const',
                   const='DEBUG',
                   dest='loglevel')
    p.add_argument('--var', '-V',
                   action='append',
                   type=kvdict)
    p.add_argument('--output', '-o')

    g = p.add_argument_group('Source options')
    g.add_argument('--environ', '-E',
                   action='store_true')
    if have_json:
        g.add_argument('--json', '-J')

    if have_yaml:
        g.add_argument('--yaml', '-Y')

    p.add_argument('template')

    p.set_defaults(loglevel='WARN')
    return p.parse_args()


def main():
    args = parse_args()
    logging.basicConfig(
        level=args.loglevel)

    context = {}
    if args.environ:
        context.update(os.environ)

    if have_json and args.json:
        with open(args.extra_json) as fd:
            d = json.load(fd)

        context.update(d)

    if have_yaml and args.extra_yaml:
        with open(args.extra_yaml) as fd:
            d = yaml.load(fd)

        context.update(d)

    if args.var:
        context.update(dict(args.var))

    with open(args.template) as fd:
        template = jinja2.Template(fd.read())
    with open(args.output, 'w') if args.output else sys.stdout as fd:
        fd.write(template.render(**context))

if __name__ == '__main__':
    main()

